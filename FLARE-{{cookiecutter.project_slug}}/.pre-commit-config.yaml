# Programs to be run before every commit, to ensure code quality

repos:
  # - repo: https://github.com/asottile/seed-isort-config
  #   rev: v1.9.3
  #   hooks:
  #     - id: seed-isort-config
  #       name: Populate list of known third party package

  # Alphabetically sort imports and group into standard library, third party, and local imports
  - repo: https://github.com/pre-commit/mirrors-isort.git
    rev: v5.7.0
    hooks:
      - id: isort
        name: Sort imports
        # language_version: python3.8

  # Use the Uncompromising Code Formatter on code and code blocks in documentation
  - repo: https://github.com/ambv/black.git
    rev: 23.3.0
    hooks:
      - id: black
        name: Run black format code
        # language_version: python3.8
        # args: [-t, py38]

  - repo: https://github.com/asottile/blacken-docs.git
    rev: v1.12.1
    hooks:
      - id: blacken-docs
        name: Format code blocks in docs
        # language_version: python3.8

  # - repo: https://github.com/Lucas-C/pre-commit-hooks-nodejs.git
  #   rev: v1.1.0
  #   hooks:
  #     - id: markdown-toc
  #       name: Add table of contents to Markdown files


  # Check `noqa` statements
  - repo: https://github.com/pre-commit/pygrep-hooks.git
    rev: v1.7.1
    hooks:
      - id: python-use-type-annotations
        name: python-check-blanket-noqa

  # Make sure the docstrings are properly formatted.
  # Currently disabled this, because I'm not ready for it! :(
  # - repo: https://github.com/pycqa/pydocstyle.git
  #   rev: 5.0.2
  #   hooks:
  #     - id: pydocstyle
  #       name: Check documentation formatting

  # Various minor formatting
  - repo: https://github.com/pre-commit/pre-commit-hooks.git
    rev: v3.4.0
    hooks:
      - id: check-yaml
        name: Check YAML files
      - id: trailing-whitespace
        name: Check trailing whitespace
        # exclude: (?x)^(doc/analysis.org)$
      - id: end-of-file-fixer
        name: Check files end in single new line
      - id: mixed-line-ending
        name: Check for uniform line endings
      - id: check-executables-have-shebangs
        name: Check executables have shebangs
      - id: check-json
        name: Check JSON files are parseable
      - id: pretty-format-json
        name: Prettify JSON files
        args: [--autofix, --top-keys, "title,description,type,properties,patternProperties"]

  # Finally, run a static code checker to look for errors
  - repo: https://github.com/PyCQA/flake8.git
    rev: 3.8.4
    hooks:
      - id: flake8
        name: Run flake8 static code checker
        language_version: python3.11
        args: [--max-line-length=200]

  # Autoflake removes all unused imports and variables
  - repo: https://github.com/pycqa/autoflake
    rev: v2.0.1  # Use the latest stable version
    hooks:
      - id: autoflake
        name: Run autoflake to remove unused imports and variables
        args: [--remove-all-unused-imports, --remove-unused-variables, --in-place, --expand-star-imports]
        files: \.py$

  # Sorts and organises imports in the 'black' format
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0  # Use the latest stable version
    hooks:
      - id: isort
        name: Run isort to organise imports in the 'black' format
        args: [--profile, black]
  # Check spelling
  - repo: https://github.com/codespell-project/codespell
    rev: v2.2.4
    hooks:
    - id: codespell

  # # Hooks to check these hooks
  # - repo: meta
  #   hooks:
  #     - id: check-hooks-apply
  #       name: Check hooks apply
  #     - id: check-useless-excludes
  #       name: Check for useless hook excludes
