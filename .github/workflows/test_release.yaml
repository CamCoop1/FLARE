name: test-release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "hep-flare"
  OWNER: "CamCoop1"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      prefix: ${{ steps.release.outputs.prefix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Extract tag and Details
        id: test-release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')            
            SUFFIX=$(echo "$TAG_NAME" | grep -oE '[a-z]+[0-9]+$' || echo "")
            PREFIX=$(echo "$TAG_NAME" | sed -E 's/[a-z]+[0-9]+$//')
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "prefix=$PREFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Prefix is $PREFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  # check_pypi:
  #   needs: details
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Fetch information from PyPI
  #       run: |
  #         response=$(curl -s https://test.pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
  #         latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
  #         if [ -z "$latest_previous_version" ]; then
  #           echo "Package not found on PyPI."
  #           latest_previous_version="0.0.0"
  #         fi
  #         echo "Latest version on PyPI: $latest_previous_version"
  #         echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

  #     - name: Install packaging module
  #       run: python3 -m pip install packaging

  #     - name: Compare versions and exit if not newer
  #       run: |
  #         # Define the regex to match version numbers
  #         VERSION_REGEX="^([0-9]+\.[0-9]+\.[0-9]+)([a-zA-Z0-9]+)?$"

  #         # Parse the NEW_VERSION
  #         if [[ "$NEW_VERSION" =~ $VERSION_REGEX ]]; then
  #           NEW_PREFIX="${BASH_REMATCH[1]}"
  #           NEW_SUFFIX="${BASH_REMATCH[2]}"
  #         else
  #           echo "Failed to parse NEW_VERSION: $NEW_VERSION. Expected format: X.Y.Z[a-zA-Z0-9]*"
  #           exit 1
  #         fi

  #         # Parse the LATEST_VERSION
  #         if [[ "$LATEST_VERSION" =~ $VERSION_REGEX ]]; then
  #           LATEST_PREFIX="${BASH_REMATCH[1]}"
  #           LATEST_SUFFIX="${BASH_REMATCH[2]}"
  #         else
  #           echo "Failed to parse LATEST_VERSION: $LATEST_VERSION. Expected format: X.Y.Z[a-zA-Z0-9]*"
  #           exit 1
  #         fi

  #         # Compare version prefix
  #         if [ "$NEW_PREFIX" != "$LATEST_PREFIX" ]; then
  #           if [ "$(printf '%s\n' "$LATEST_PREFIX" "$NEW_PREFIX" | sort -V | tail -n1)" == "$NEW_PREFIX" ]; then
  #             echo "New prefix $NEW_PREFIX is greater than $LATEST_PREFIX"
  #             exit 0
  #           else
  #             echo "New prefix $NEW_PREFIX is not greater than $LATEST_PREFIX"
  #             exit 1
  #           fi
  #         fi

  #         # Compare ranks and numbers if prefixes are the same
  #         if [ "$NEW_RANK" \> "$LATEST_RANK" ]; then
  #           echo "New version $NEW_VERSION is greater than $LATEST_VERSION"
  #           exit 0
  #         else
  #           echo "New version $NEW_VERSION is not greater than $LATEST_VERSION"
  #           exit 1
  #         fi

  #         # Same prefix â†’ compare suffixes
  #         get_suffix_rank() {
  #           local suffix="$1"
  #           if [[ "$suffix" =~ ^a([0-9]+)$ ]]; then echo "1 ${BASH_REMATCH[1]}"; return; fi
  #           if [[ "$suffix" =~ ^b([0-9]+)$ ]]; then echo "2 ${BASH_REMATCH[1]}"; return; fi
  #           if [[ "$suffix" =~ ^rc([0-9]+)$ ]]; then echo "3 ${BASH_REMATCH[1]}"; return; fi
  #           # No suffix = stable release
  #           echo "4 0"
  #         }

  #         NEW_RANK=$(get_suffix_rank "$NEW_SUFFIX")
  #         LATEST_RANK=$(get_suffix_rank "$LATEST_SUFFIX")

  #         # Compare ranks and numbers
  #         if [ "$NEW_RANK" \> "$LATEST_RANK" ]; then
  #           echo "New version $NEW_VERSION is greater than $LATEST_VERSION"
  #           exit 0
  #         else
  #           echo "New version $NEW_VERSION is not greater than $LATEST_VERSION"
  #           exit 1
  #         fi

  setup_and_build:
    needs: [details]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set project version with Poetry
        run: |
          poetry version ${{ needs.details.outputs.new_version }}

      - name: Install dependencies
        run: poetry install --sync --no-interaction

      - name: Build source and wheel distribution
        run: |
          poetry build

      - name: Verify build output
        run: |
          ls -lh ./dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

# If pre-release, we test on test-pypi
  test_pypi_publish:
    name: Upload to TestPyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TESTPYPI_API_TOKEN }}  

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes
